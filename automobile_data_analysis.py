# -*- coding: utf-8 -*-
"""Automobile Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F2FNTuuDrFd0x-w5bhrSf7h4n5m_RBu7

# Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

from sklearn.preprocessing import StandardScaler

from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore', category=FutureWarning)

"""# Loading Dataset"""

from google.colab import files
uploaded = files.upload()

data=pd.read_csv('auto-mpg.csv')
data.sample(5)

"""# Dataset Analysis"""

data.columns

data.info()

data['horsepower']=data['horsepower'].replace('?','150')
data['horsepower']=data['horsepower'].astype('int')

data.describe()

data.duplicated().sum()

data.dtypes.value_counts()

data.nunique()

print("data rows --->",data.shape[0],"no's")
print("data columns -->",data.shape[1],"no's")

data.duplicated().sum()

categorical_columns = data.select_dtypes(include=['object']).columns
numerical_columns = data.select_dtypes(include=['number']).columns

# Example for one column
skewness = data[numerical_columns].skew()
print(f"Skewness of numerical_column: {skewness}")

#variances
variances = data[numerical_columns].var()
print(variances)

"""# EDA Plot Analysis"""

for col in numerical_columns:
    sns.histplot(data[col], kde=True, bins=30)
    plt.title(f"Histogram of {col}")
    plt.show()

"""# Pair plot"""

sns.pairplot(data[numerical_columns])
plt.show()

for col in numerical_columns:
    plt.figure(figsize=(10,2))
    sns.boxplot(data=data,x=col,palette=[ '#f0f8ff'])
    plt.title(f'Box Plot for {col}')
    plt.tight_layout()
    plt.show()

corr_matrix = data[numerical_columns].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix (Data)')
plt.show()

"""# Preprocessing"""

# dropping unwanted columns
data = data.drop(columns=['car name'], axis=1)
data.head()

# Separate features and target
X = data.drop(columns=['mpg'])  # Features
y = data['mpg']  # Target
X.head()

print(data.dtypes)

data["cylinders"] = data["cylinders"].astype(str)
data["origin"] = data["origin"].astype(str)
data = pd.get_dummies(data, drop_first=True)  # drop_first to avoid multicollinearity
data = data.applymap(lambda x: 1 if x is True else (0 if x is False else x))
data.head()

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_scaled

"""# Model Preprocessing"""

x_train,x_test,y_train,y_test=train_test_split(X_scaled,y,test_size=0.2,random_state=2024)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

model_lr = LinearRegression()
model_lr.fit(x_train, y_train)
y_pred_lr = model_lr.predict(x_test)
mse = mean_squared_error(y_test, y_pred_lr)
r2 = r2_score(y_test, y_pred_lr)

print("MSE:", mse)
print("R2 Score:", r2)

!pip install catboost

from catboost import CatBoostRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Initialize CatBoostRegressor model
cat_model = CatBoostRegressor(iterations=1000, learning_rate=0.1, depth=10, cat_features=[])

# Fit the model on training data
cat_model.fit(x_train, y_train)

# Make predictions on the test data
y_pred = cat_model.predict(x_test)

# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print results
print("MSE:", mse)
print("R2 Score:", r2)

y_pred

x_test[1]

values=[[5,50,150,5000,25,50,3]]
predicted_milege=cat_model.predict(values)
predicted_milege